generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) // Unique account ID
  userId            String  // Connects to User model (foreign key)
  type              String  // Type of account (e.g., oauth)
  provider          String  // e.g., "github", "google"
  providerAccountId String  // ID from the provider
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Relationship: one account belongs to one user
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensures no duplicate provider accounts
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Unique combo to verify email
}

//
// ------------------ Main App Models ------------------
//

model User {
  id              String         @id @default(cuid())  // Unique user ID
  name            String?
  email           String?        @unique               // One email per user
  emailVerified   DateTime?
  image           String?

  // One user can have many:
  accounts        Account[]
  sessions        Session[]
  trips          Trip[]
}

model Trip {
  id         String   @id @default(cuid()) 
  title     String
  description String?
  startDate  DateTime
  endDate    DateTime?
  imageUrl  String? 

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id         String   @id @default(cuid())
  locationTitle String
  latitude Float
  longitude Float

  tripId String
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  order Int @default(0) // Order of the location in the trip

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}